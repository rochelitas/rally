// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Defines values for Outcome.
const (
	Continue   Outcome = "continue"
	Finished   Outcome = "finished"
	Invalid    Outcome = "invalid"
	Query      Outcome = "query"
	Terminated Outcome = "terminated"
)

// Directory defines model for Directory.
type Directory = []string

// Error defines model for Error.
type Error struct {
	Code      int32   `json:"code"`
	Message   string  `json:"message"`
	Reference *string `json:"reference,omitempty"`
}

// GameInput defines model for GameInput.
type GameInput struct {
	MapId MapId `json:"mapId"`
	Steps Steps `json:"steps"`
}

// GameOutput defines model for GameOutput.
type GameOutput struct {
	Outcome  Outcome `json:"outcome"`
	Position Point   `json:"position"`
	Speed    Point   `json:"speed"`
	Trace    Points  `json:"trace"`
}

// Map defines model for Map.
type Map struct {
	Finish Points `json:"finish"`
	Id     MapId  `json:"id"`
	Road   Points `json:"road"`
	Start  Point  `json:"start"`
}

// MapId defines model for MapId.
type MapId = string

// Outcome defines model for Outcome.
type Outcome string

// Point defines model for Point.
type Point struct {
	X int32 `json:"x"`
	Y int32 `json:"y"`
}

// Points defines model for Points.
type Points = []Point

// Steps defines model for Steps.
type Steps = string

// PostStepJSONRequestBody defines body for PostStep for application/json ContentType.
type PostStepJSONRequestBody = GameInput

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetMapMapId request
	GetMapMapId(ctx context.Context, mapId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMaps request
	GetMaps(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPing request
	GetPing(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostStep request with any body
	PostStepWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostStep(ctx context.Context, body PostStepJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetMapMapId(ctx context.Context, mapId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMapMapIdRequest(c.Server, mapId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMaps(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMapsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPing(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPingRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostStepWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostStepRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostStep(ctx context.Context, body PostStepJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostStepRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetMapMapIdRequest generates requests for GetMapMapId
func NewGetMapMapIdRequest(server string, mapId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "mapId", runtime.ParamLocationPath, mapId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/map/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMapsRequest generates requests for GetMaps
func NewGetMapsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/maps")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPingRequest generates requests for GetPing
func NewGetPingRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ping")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostStepRequest calls the generic PostStep builder with application/json body
func NewPostStepRequest(server string, body PostStepJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostStepRequestWithBody(server, "application/json", bodyReader)
}

// NewPostStepRequestWithBody generates requests for PostStep with any type of body
func NewPostStepRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/step")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetMapMapId request
	GetMapMapIdWithResponse(ctx context.Context, mapId string, reqEditors ...RequestEditorFn) (*GetMapMapIdResponse, error)

	// GetMaps request
	GetMapsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMapsResponse, error)

	// GetPing request
	GetPingWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetPingResponse, error)

	// PostStep request with any body
	PostStepWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostStepResponse, error)

	PostStepWithResponse(ctx context.Context, body PostStepJSONRequestBody, reqEditors ...RequestEditorFn) (*PostStepResponse, error)
}

type GetMapMapIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Map
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetMapMapIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMapMapIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMapsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Directory
}

// Status returns HTTPResponse.Status
func (r GetMapsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMapsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetPingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostStepResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GameOutput
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r PostStepResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostStepResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetMapMapIdWithResponse request returning *GetMapMapIdResponse
func (c *ClientWithResponses) GetMapMapIdWithResponse(ctx context.Context, mapId string, reqEditors ...RequestEditorFn) (*GetMapMapIdResponse, error) {
	rsp, err := c.GetMapMapId(ctx, mapId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMapMapIdResponse(rsp)
}

// GetMapsWithResponse request returning *GetMapsResponse
func (c *ClientWithResponses) GetMapsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMapsResponse, error) {
	rsp, err := c.GetMaps(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMapsResponse(rsp)
}

// GetPingWithResponse request returning *GetPingResponse
func (c *ClientWithResponses) GetPingWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetPingResponse, error) {
	rsp, err := c.GetPing(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPingResponse(rsp)
}

// PostStepWithBodyWithResponse request with arbitrary body returning *PostStepResponse
func (c *ClientWithResponses) PostStepWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostStepResponse, error) {
	rsp, err := c.PostStepWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostStepResponse(rsp)
}

func (c *ClientWithResponses) PostStepWithResponse(ctx context.Context, body PostStepJSONRequestBody, reqEditors ...RequestEditorFn) (*PostStepResponse, error) {
	rsp, err := c.PostStep(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostStepResponse(rsp)
}

// ParseGetMapMapIdResponse parses an HTTP response from a GetMapMapIdWithResponse call
func ParseGetMapMapIdResponse(rsp *http.Response) (*GetMapMapIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMapMapIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Map
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetMapsResponse parses an HTTP response from a GetMapsWithResponse call
func ParseGetMapsResponse(rsp *http.Response) (*GetMapsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMapsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Directory
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPingResponse parses an HTTP response from a GetPingWithResponse call
func ParseGetPingResponse(rsp *http.Response) (*GetPingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostStepResponse parses an HTTP response from a PostStepWithResponse call
func ParsePostStepResponse(rsp *http.Response) (*PostStepResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostStepResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GameOutput
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// retrieve a map by its Id
	// (GET /map/{mapId})
	GetMapMapId(ctx echo.Context, mapId string) error

	// (GET /maps)
	GetMaps(ctx echo.Context) error

	// (GET /ping)
	GetPing(ctx echo.Context) error
	// validate the step and calculate the new game state
	// (POST /step)
	PostStep(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetMapMapId converts echo context to params.
func (w *ServerInterfaceWrapper) GetMapMapId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "mapId" -------------
	var mapId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "mapId", runtime.ParamLocationPath, ctx.Param("mapId"), &mapId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter mapId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetMapMapId(ctx, mapId)
	return err
}

// GetMaps converts echo context to params.
func (w *ServerInterfaceWrapper) GetMaps(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetMaps(ctx)
	return err
}

// GetPing converts echo context to params.
func (w *ServerInterfaceWrapper) GetPing(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPing(ctx)
	return err
}

// PostStep converts echo context to params.
func (w *ServerInterfaceWrapper) PostStep(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostStep(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/map/:mapId", wrapper.GetMapMapId)
	router.GET(baseURL+"/maps", wrapper.GetMaps)
	router.GET(baseURL+"/ping", wrapper.GetPing)
	router.POST(baseURL+"/step", wrapper.PostStep)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RXTW/bOBP+KwTf97TQWs5Hm1a3LpLtBrtpjLoLFyiMBSONZbYSyZIjN0bg/74YUrIk",
	"W0kVoD3szUPNPPP1cIZ+4KkujVag0PHkgbt0DaXwPy+lhRS13ZIA96I0BfDkE3f+1wmP6l+nfBlxiVB6",
	"K9wa4Al3aKXK+S5qDoS1YkvylbXakqbIMolSK1HMrDZgUYLjyUoUDqLWHwWYAU+mES/BOZET2O2fhGQ6",
	"Zo3aA19pWwrkCZcKz075PgCpEHKwZLgHGgjXwgosqHToq//8tZIWMiqE99iiLfeu9N1nSJHQ3ooSrpWp",
	"8DkJl8JcZ+TWn/xTCkO1RjCOJ/zqar5YLD6+WxxXoLZ74P+3sOIJ/1/c9jauGxvfeKXdHvBp7blXOkw8",
	"OGogHsv7tsJnJq4rTHVJSCuppFsDOTHaeWNSuOfJWcS3PLmgBAxAVp/+euqPp8Q3K6h5n/x5OD7dRR3b",
	"RnrRky68dFZLr7x03pNe9DRf1tLLJp4O5kXP38VuedSqfaZPl/+2Vtv1y/CUyUxL5VuwL88o7bpqI7SP",
	"6RBsOyE2zqN9nkMcuRHmOeQIlGgae9JrwvmA9KqWTmqJhtTRrbJaZH3Ik16XG+l1jx2vBx1EA4G9GODK",
	"ee/bWc/ujMJ0KCzWxG4IfMSgphzjOhZyHzkZQlHGAu+jHcGzA+LIrGlB1OTT4D1CmDDf9qzoN/Nolt+2",
	"t+xplqmqpHi+VmC3POJSbUThg0u1QqkqYjeCLaUSCG20kFGcbTRd7cNYQgWewffuTDro/f3IPbcdpXfQ",
	"lHtOhkP1r3veew10uNufsue77qtg3Aw6eCnMmw3VVrjdflGb2Kd3V/PFx+Uvx2Wn3KRaaQLJwKVWmjBD",
	"Oa6lY9IxXAOjmApAYB0VpldMFAUDhZLKzqTyulYUxZbloqQmFzIF5Xy3lPB7a/Hh99lfPOKVLXjC14jG",
	"JXEMavJNfpEGMikm2uYxSXHQpbwl+uTee2xanexSoGCXnYgjvgHrQuzTyXRyQobagBJG8oSfTaaTKY1g",
	"gWtfsrgUJn7wi3pHcg6efMQiQYD+gfEW8EaYm3qbG2FFCQjW+b5KckV4PGqya/Z+Sxe0FUT1o3HowbQk",
	"ZWe0coG5p9NpeKsphPo6GFPI1McUf3Zhv7V435lXocP9zuZaZ6xxSlU6n57/MJ/h8TrgtRSGKY1spSuV",
	"+TvlqrIU9HjmFtBK2AATjNTutkyiY9dBjRrlOh3qw+5NC+nQc3IjZCHuCmDeLhrsqOM/sezt34LvF99r",
	"xIa48FiG6RrSL0yu/O1yYDdgmSjkBoZymxHSd3NDuMfYFEIeZNWOEaM9zsC06AdXxyNdHVKdEL17CdBo",
	"N3CrZtohja76ooDD33S2/WH1b/9S7Pqjm+7i7ic2vvOm/09cO7/DBUJgFoJhQmUsFUVaFc2xgm9+mDOH",
	"AiF4CE0PQ7Dvbf5N5DnYP6o79mZ2zd5UqNmNTr8EVvZn/kZaDEgTF8zW1d0k1WX89vbv97Gf9XEzyQ8d",
	"XcIGCm1KUFjfiSN8v4gmRluc+pWSwSbenMQDYB/AjUZBcPgIzBxFLlU+Fslh/gjQzOqsSv2SHYnlcZa7",
	"fwMAAP//kiv5E6wQAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
